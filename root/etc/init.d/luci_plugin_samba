#!/bin/sh /tmp/.luci/etc/rc.common

START=50
STOP=90

CONTAINER_NAME='luci_plugin_samba'
SMB_CONF="/tmp/conf.d/$CONTAINER_NAME/smb.conf"

smb_header() {
  local name workgroup description charset

  config_get name        $1 name
  config_get workgroup   $1 workgroup
  config_get description $1 description

  sed -e "s#|NAME|#$name#g" \
      -e "s#|WORKGROUP|#$workgroup#g" \
      -e "s#|DESCRIPTION|#$description#g" \
      /etc/config/template/smb.conf.template > "$SMB_CONF"
}

smb_add_share() {
  local name
  local path
  local users
  local read_only
  local guest_ok
  local create_mask
  local dir_mask
  local browseable

  config_get name $1 name
  config_get path $1 path
  config_get users $1 users
  config_get read_only $1 read_only
  config_get guest_ok $1 guest_ok
  config_get create_mask $1 create_mask
  config_get dir_mask $1 dir_mask
  config_get browseable $1 browseable

  [ -z "$name" -o -z "$path" ] && return

  echo -e "\n[$name]\n  path = $path" >> "$SMB_CONF"
  [ -n "$users" ] && echo -e "  valid users = $users" >> "$SMB_CONF"
  [ -n "$read_only" ] && echo -e "  read only = $read_only" >> "$SMB_CONF"
  [ -n "$guest_ok" ] && echo -e "  guest ok = $guest_ok" >> "$SMB_CONF"
  [ -n "$create_mask" ] && echo -e "  create mask = $create_mask" >> "$SMB_CONF"
  [ -n "$dir_mask" ] && echo -e "  directory mask = $dir_mask" >> "$SMB_CONF"
  [ -n "$browseable" ] && echo -e "  browseable = $browseable" >> "$SMB_CONF"
  echo "  veto files = /._*/.apdisk/.AppleDouble/.DS_Store/.TemporaryItems/.Trashes/desktop.ini/ehthumbs.db/Network Trash Folder/Temporary Items/Thumbs.db/" >> "$SMB_CONF"
  echo "  delete veto files = yes" >> "$SMB_CONF"
}

init_config() {
  config_load "$CONTAINER_NAME"
  config_foreach smb_header samba
  config_foreach smb_add_share sambashare
}

smb_add_user() {
  local uid
  local username
  local passwd
  local enabled

  config_get uid $1 uid
  config_get username $1 username
  config_get passwd $1 passwd
  config_get enabled $1 enabled
  [ "$enabled"=="yes" ] && [ -n "$uid" ] && [ -n "$username" ] && [ -n "$passwd" ] && docker exec -t "$CONTAINER_NAME" smbuser add "$uid" "$username" "$passwd"
}

start() {
  init_config
  SAMBA_STATUS=$(docker inspect "$CONTAINER_NAME" | grep Status |awk -F'"' 'NR==1{print $4}')
  if [ "$SAMBA_STATUS"=="running" ]; then
    docker exec -t "$CONTAINER_NAME" smbuser clear && \
    config_foreach smb_add_user sambauser ; \
    docker cp "$SMB_CONF" "$CONTAINER_NAME":/etc/samba/smb.conf && \
    docker restart "$CONTAINER_NAME"
  elif [ "$SAMBA_STATUS"=="exited" ]; then
    docker start "$CONTAINER_NAME" && \
    docker exec -t "$CONTAINER_NAME" smbuser clear && \
    config_foreach smb_add_user sambauser ; \
    docker cp "$SMB_CONF" "$CONTAINER_NAME":/etc/samba/smb.conf && \
    docker restart "$CONTAINER_NAME"
  elif [ "$SAMBA_STATUS"=="" ]; then
    docker pull lisaac/luci-plugin-samba && \
    docker run  -d \
                --name "$CONTAINER_NAME" \
                --restart unless-stopped \
                -e TZ=Asia/Shanghai \
                --network host \
                -v /media:/media:rslave \
                lisaac/luci-plugin-samba  && \
    config_foreach smb_add_user sambauser ; \
    docker cp "$SMB_CONF" "$CONTAINER_NAME":/etc/samba/smb.conf && \
    docker restart "$CONTAINER_NAME"
  fi
}
